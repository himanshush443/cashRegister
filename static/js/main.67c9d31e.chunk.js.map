{"version":3,"sources":["firebase.js","components/CashData.js","components/CashRegister.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","storage","auth","useStyles","makeStyles","payment","width","border","margin","paymentDate","color","props","fontSize","textAlign","paymentRemark","paymentAmount","imageStyle","objectFit","CashData","amount","remark","imageUrl","typePayment","date","classes","CardContent","className","Grid","container","item","xs","src","signupForm","display","justifyContent","alignItems","root","minWidth","marginTop","marginBottom","position","caption","paddingTop","borderTop","warning","dateTime","paddingBottom","dateCss","inputs","marginLeft","progress","uploadImageFile","submit","uploadImage","padding","fontFamily","borderRadius","cursor","uploadButton","uploadIcon","paddingRight","uploadGrid","CashRegister","today","Date","getDate","getMonth","getFullYear","useState","toLocaleTimeString","time","setTime","setInterval","t","setWarning","image","setImage","setProgress","finalBalance","cash","setCash","cashReg","setCashReg","setFinalBalance","setValue","e","target","name","value","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","sum","reduce","updatedSum","parseInt","console","log","sm","md","Card","Typography","variant","component","spacing","Button","dateIcon","timeCss","timeIcon","Box","TextField","label","type","onChange","max","files","hidden","for","Switch","checked","inputProps","onClick","preventDefault","ref","put","on","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","add","timestamp","FieldValue","serverTimestamp","handleUpload","paymentList","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67c9d31e.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCA9E0Xpz_7DmzS24R1-Ps3QuqXc8ZMlyA\",\r\n    authDomain: \"cashregister-fc41b.firebaseapp.com\",\r\n    databaseURL: \"https://cashregister-fc41b-default-rtdb.asia-southeast1.firebasedatabase.app\",\r\n    projectId: \"cashregister-fc41b\",\r\n    storageBucket: \"cashregister-fc41b.appspot.com\",\r\n    messagingSenderId: \"189218978752\",\r\n    appId: \"1:189218978752:web:757d7fede02559d146a625\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n","import {\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    payment: {\r\n        width: 300,\r\n        border: '1px solid lightGrey',\r\n        margin: 20,\r\n    },\r\n    paymentDate: {\r\n        color: props => props.color,\r\n        fontSize: 14,\r\n        textAlign: 'left'\r\n    },\r\n    paymentRemark: {\r\n        color: props => props.color,\r\n        fontSize: 18,\r\n        textAlign: 'left'\r\n    },\r\n    paymentAmount: {\r\n        color: props => props.color,\r\n        fontSize: props => props.fontSize,\r\n        textAlign: 'right'\r\n    },\r\n    imageStyle: {\r\n        width: '100%',\r\n        objectFit: 'contain'\r\n    }\r\n});\r\n\r\nfunction CashData(props) {\r\n\r\n    const { amount, remark, imageUrl, typePayment, date } = props;\r\n    const color = typePayment ? 'lightGreen' : 'red';\r\n    const size = typePayment ? '16px' : '14px';\r\n    const classes = useStyles({ color: color, fontSize: size });\r\n\r\n    return (\r\n        <CardContent className={classes.payment}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <Grid className={classes.paymentDate}>\r\n                        {date}\r\n                    </Grid>\r\n                    <Grid className={classes.paymentRemark}>\r\n                        {remark}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid xs={2} />\r\n                <Grid xs={4} className={classes.paymentAmount}>\r\n                    {typePayment ? '' : '-'}{amount}\r\n                </Grid>\r\n            </Grid>\r\n            <hr/>\r\n            <Grid xs={12}>\r\n                <img className={classes.imageStyle}\r\n                    src={imageUrl}\r\n                />\r\n            </Grid>\r\n        </CardContent>\r\n\r\n    )\r\n}\r\n\r\nexport default CashData","\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    TextField,\r\n    Typography,\r\n    Box,\r\n    Button,\r\n    Switch\r\n} from '@material-ui/core';\r\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport firebase from 'firebase';\r\nimport { db, storage } from '../firebase';\r\n\r\nimport CashData from './CashData';\r\nimport { ContactsOutlined } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles({\r\n    signupForm: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    root: {\r\n        minWidth: 200,\r\n        width: 400,\r\n        marginTop: '5%',\r\n        marginBottom: '5%',\r\n        position: 'fixed'\r\n    },\r\n    caption: {\r\n        paddingTop: 20,\r\n        marginBottom: 15,\r\n        borderTop: '5px solid #3f50b5'\r\n    },\r\n    warning: {\r\n        color: 'red'\r\n    },\r\n    dateTime: {\r\n        paddingTop: 12,\r\n        paddingBottom: 24,\r\n        borderTop: '1px solid lightGrey'\r\n    },\r\n    dateCss: {\r\n        fontSize: '10px',\r\n    },\r\n    inputs: {\r\n        marginBottom: 12,\r\n        width: '85%',\r\n        marginLeft: 4\r\n    },\r\n    progress: {\r\n        width: '85%'\r\n    },\r\n    uploadImageFile: {\r\n        display: 'none'\r\n    },\r\n    submit: {\r\n        width: '84%'\r\n    },\r\n    uploadImage: {\r\n        textAlign: 'left',\r\n        fontSize: '15px',\r\n        color: '#3f50b5',\r\n        border: '1px solid lightGrey',\r\n        padding: '0.5rem',\r\n        fontFamily: 'sans-serif',\r\n        borderRadius: '0.3rem',\r\n        cursor: 'pointer',\r\n        marginTop: '1rem',\r\n    },\r\n    uploadButton: {\r\n        border: 'none',\r\n    },\r\n    uploadIcon: {\r\n        fontSize: 13,\r\n        paddingRight: 10,\r\n        paddingTop: 15,\r\n    },\r\n    uploadGrid: {\r\n        marginBottom: 9\r\n    }\r\n\r\n});\r\n\r\nfunction CashRegister() {\r\n    const classes = useStyles();\r\n\r\n    var today = new Date();\r\n    var date = today.getDate() + '/' + (today.getMonth() + 1) + '/' + today.getFullYear();\r\n    const [time, setTime] = useState(today.toLocaleTimeString());\r\n\r\n    setInterval(() => {\r\n        var d = new Date();\r\n        var t = d.toLocaleTimeString();\r\n        setTime(t);\r\n    }, 1000);\r\n\r\n    const [warning, setWarning] = useState('');\r\n    const [image, setImage] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [cash, setCash] = useState({\r\n        amount: '',\r\n        remark: '',\r\n        finalBalance: 0,\r\n        typePayment: false\r\n    });\r\n    const [cashReg, setCashReg] = useState([]);\r\n    const [finalBalance, setFinalBalance] = useState(0);\r\n\r\n    const setValue = (e) => {\r\n        setCash({\r\n            ...cash,\r\n            [e?.target?.name]: e?.target?.value\r\n        });\r\n        setWarning('');\r\n    }\r\n\r\n    const handleImage = (e) => {\r\n        if (e.target.files[0]) {\r\n            setImage(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const handleType = () => {\r\n        setCash({\r\n            ...cash,\r\n            typePayment: !cash.typePayment\r\n        })\r\n    }\r\n\r\n    const handleUpload = (e) => {\r\n        e.preventDefault();\r\n        if (cash.amount !== '' && cash.remark !== '' && image != null) {\r\n\r\n            if (cash.typePayment)\r\n                setCash({\r\n                    ...cash,\r\n                    finalBalance: cash.finalBalance + cash.amount\r\n                });\r\n            else\r\n                setCash({\r\n                    ...cash,\r\n                    finalBalance: cash.finalBalance - cash.amount\r\n                });\r\n            const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                (snapshot) => {\r\n                    const progress = Math.round(\r\n                        (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                    );\r\n                    setProgress(progress);\r\n                },\r\n                (error) => {\r\n                    console.log(error);\r\n                    alert(error.message);\r\n                },\r\n                () => {\r\n                    storage\r\n                        .ref(\"images\")\r\n                        .child(image.name)\r\n                        .getDownloadURL()\r\n                        .then(url => {\r\n                            db.collection(\"cashReg\").add({\r\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                                amount: cash.amount,\r\n                                remark: cash.remark,\r\n                                typePayment: cash.typePayment,\r\n                                finalBalance: cash.finalBalance,\r\n                                date: date,\r\n                                imageUrl: url\r\n                            })\r\n                            console.log('Data Uploaded');\r\n                            setProgress(0);\r\n                            setCash({\r\n                                amount: '',\r\n                                remark: '',\r\n                                typePayment: false\r\n                            });\r\n                            setWarning('');\r\n                        });\r\n                }\r\n            )\r\n\r\n        }\r\n        else {\r\n            setWarning('Please fill all fields and bills!');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        db.collection('cashReg').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\r\n            setCashReg(snapshot.docs.map(doc => {\r\n                return {\r\n                    id: doc.id,\r\n                    payment: doc.data()\r\n                }\r\n            }));\r\n        });\r\n\r\n\r\n        \r\n        // cashReg.map(({ id, payment }) => {\r\n        //     console.log(payment.amount);\r\n        //     if (payment.typePayment)\r\n        //         setFinalBalance(finalBalance + parseInt(payment.amount));\r\n        //     else\r\n        //         setFinalBalance(finalBalance - parseInt(payment.amount));\r\n        //     console.log(finalBalance);\r\n        // })\r\n    }, []);\r\n\r\n    useEffect((() => {\r\n        const sum = cashReg.reduce(function (sum, { id, payment }) {\r\n            const updatedSum = payment.typePayment ? sum + parseInt(payment.amount) : sum - parseInt(payment.amount);\r\n            console.log(updatedSum);\r\n            return updatedSum;\r\n        }, 0);\r\n        setFinalBalance(sum);\r\n    }),[cashReg]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.signupForm}>\r\n                <Grid container>\r\n                    <Grid sm={2} />\r\n                    <Grid item md={4}>\r\n                        <Card className={classes.root}>\r\n                            <form>\r\n                                <CardContent>\r\n                                    <Typography className={classes.caption} variant=\"h5\" component=\"h2\">\r\n                                        Cash Register\r\n                                    </Typography>\r\n                                    <Grid container spacing={1} className={classes.dateTime}>\r\n                                        <Grid item xs={6} className={classes.dateCss}>\r\n                                            <Button className={classes.dateIcon}\r\n                                                variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                            >\r\n                                                <DateRangeIcon />\r\n                                                {date}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={6} className={classes.timeCss}>\r\n                                            <Button className={classes.timeIcon}\r\n                                                variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                            >\r\n                                                <ScheduleIcon />\r\n                                                {time}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Box>\r\n                                        <Typography className={classes.warning}>{warning}</Typography>\r\n                                    </Box>\r\n                                    <TextField className={classes.inputs}\r\n                                        label=\"Amount\"\r\n                                        name=\"amount\"\r\n                                        type=\"number\"\r\n                                        onChange={e => setValue(e)}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    <TextField className={classes.inputs}\r\n                                        label=\"Remarks\"\r\n                                        name=\"remark\"\r\n                                        type=\"text\"\r\n                                        onChange={e => setValue(e)}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    <progress className={classes.progress}\r\n                                        value={progress}\r\n                                        max=\"100\" />\r\n                                    <Grid container>\r\n                                        <Grid item xs={6} className={classes.uploadGrid}>\r\n                                            <input onChange={handleImage} type=\"file\" id=\"actual-btn\" hidden />\r\n                                            <label type=\"button\" for=\"actual-btn\" className={classes.uploadImage}><PhotoCameraIcon className={classes.uploadIcon} />Attach Image</label>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                        <Typography>\r\n                                            Debit\r\n                                            <Switch\r\n                                                checked={cash.typePayment}\r\n                                                color=\"primary\"\r\n                                                name=\"typePayment\"\r\n                                                onChange={handleType}\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            Credit\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Box textAlign=\"center\">\r\n                                        <Button className={classes.submit}\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            type=\"submit\"\r\n                                            onClick={e => handleUpload(e)}\r\n                                        >Save\r\n                                        </Button>\r\n                                    </Box>\r\n                                </CardContent>\r\n                            </form>\r\n                            <CardContent>\r\n                                <Grid container>\r\n                                    <Grid item xs={6}>\r\n                                        <Typography>Final Balance : </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        {finalBalance}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid md={1} />\r\n                    <Grid md={4} className={classes.paymentList}>\r\n                        <div>\r\n                            {cashReg.map(({ id, payment }) => {\r\n                                return <CashData\r\n                                    key={id}\r\n                                    imageUrl={payment.imageUrl}\r\n                                    amount={payment.amount}\r\n                                    remark={payment.remark}\r\n                                    typePayment={payment.typePayment}\r\n                                    date={payment.date}\r\n                                />\r\n                            })}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CashRegister;\r\n","import './App.css';\nimport CashRegister from './components/CashRegister';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CashRegister />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}